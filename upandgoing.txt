You Don't Know JS: Up and Going (Ch1)

What is a program?

Also known as source code. A special instructions to tell the computer what tasks to perform

a collection of statements, which together describe all the steps that it takes to perform your program's purpose

What is computer language?

rules for valid format and combinations of instructions. Also known as syntax

What is a statement?

a group of words, numbers, and operators that performs a specific task

What is a variable?

simple boxes you can store any of your stuff in. Variables hold values to be used by the program

What is a literal value?

it stands alone without being stored in a variable

What is a operators?

= and * characters are operators. They perform actions with the vales and variables such as assignment and mathematic multiplication

how we perform actions on variables and values


How does JS conclude its statement?

With a semicolon (;)

What are expressions?

any reference to a variable or value, or a set of variables and values combined with operators

ex.

a = b * 2

2 is a literal value expression

b is a variable expression, which means to retrieve its current value

b * 2 is an arithmetic expression, which means to do the multiplication

a = b * 2 is an assignment expression

expression statement: b * 2

What is call expression statement?

the entire statement is the function call expression itself

alert(a);


What is interpreting the code?

This translation of commands is typically done from top to bottom, line by line, every time the program is run

What is compiling the code?

the translation is done ahead of time, so when the program runs later, what's running is actually the already compiled computer instructions ready to go

Is Javascript a compiled or interpreted language?

Javascript source code is processed each time it's run. The javascript engine actually compiles the program on the fly and then immediately runs the compiled code


Console tips

use an empty page to launch the console

multi line: shift+enter

What is var?

it's a keyword that is the primary way you declare variables

ex

var a = 20;

What are the most common operators in JavaScript?

Assignment: =

Math: +, - , *, /

Compound Assignment: +=, -=. *=, and /= are compound operators that combine a math operation with assignment

ex. a += 2 same as (a = a + 2)

Increment/ Decrement: ++(increment), -- (decrement), as in a++ similar to a = a + 1

Equality: ==(loose-equals), ===(strict-equals), != (loose not-equals), !==(strict not-equals)

Comparison: < (less than) >(greater than) <=(less than or loose-equals) >= (greater than or loose-equals)

Logical: && (and) || (or)

https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Expressions_and_Operators

What are types?

different representations for values. JS has built-in types for each of these so called primitive values

number = math
string = one or more characters, words, sentences
boolean = true or false

What are literals?

values that are included directly in the source code
string literals are surrounded by double quote "..." or single quotes '..' -- only difference is stylistic preference
boolean literals are just presented as is(i.e. 42, true, etc)

What is coercion?

conversion of types from one to another, ex. number type to a string, in order words a string is coercion to a number


ex var b = Number(a);

What do you use when  one tries compare two values that are not of the same type?

implicit coercion

you can say it is loosely equal

At time javascript will implicitly coerce values to the matching type
for example "99" == 99;

JS will convert "99" to 99 which would make that statement true

What are code comments?

bits of text in your program that are inserted purely to explain things to a human

What are some helpful tips for comments?

Code without comments is suboptimal

too many comments is probably a sign of poorly written code

comments should explain why, not what. They can optionally explain how if that's particularly confusing.


What are the types of comments in JS?

// This is single line comment

/* But this is a multiline comment.

            */


A single line comment is appropriate if you;re going to put a comment right above a single statement, or even at the end of a line

The multiline comment is appropriate if you have several lines worth of explanation to make in your comment

What is Static typing?

also known as type enforcement, is typically cited as a benefit for program correctness by preventing unintended value conversions.

What is Weak typing?

Also known as dynamic typing. It allows a variable to hold any type of value at any time

JS uses dynamic typing, meaning variables can hold values of any type without any type enforcement

How do we declare variables in JS?

we use var statement

var amount = 99.99;

amount = amount * 2;

console.log(amount);

amount = "$" + String(amount);

console.log(amount);

What is state?

tracking the changes to values as your program runs

primary purpose of variables: Managing program state

What is a constant?

when you declare a variable with a value and intend for that value to not change throughout the program

declared at the top of program

constants are capitalized, with underscores between multiple words

var TAX_RATE = 0.08;

var amount = 99.99;

amount = amount * 2;

amount = amount + ( amount * TAX_RATE);

console.log(amount);
console.log(amount.toFixed(2));


What is the new way to write a variable as a constant in JS?

const TAX_RATE = 0.08;

var amount = 99.99;


What is a block?

to group a series of statements together

How is a block defined in JS?

a block is defined by wrapping one or more statements inside a curly-brace pair {...}

ex.

var amount = 99.99;

// a general block

{

amount = amount * 2;
console.log(amount);

}

Not a commonly seen in JS

Normally blocks are used with control statement, such as an if statement or a loop

var amount = 99.99;

// is amount big enough

if (amount > 10) { //<-- block attached to 'if'

    amount = amount * 2;
    console.log(amount);
}

a block statement does not need a semicolon to conclude it

What are conditionals statement?

decisions

the outcome can be true or false

most common one is the if statement

var bank_balance = 302.13;
var amount = 99.99;

if (amount < bank_balance) {

    console.log("I want to buy this phone!");
}

provide an alternative if the conditions isn't true, by using an else clause:

const ACCESSORY_PRICE = 9.99;

var bank_balance = 302.13;
var amount = 99.99;

amount = amount * 2;

// can we afford the extra purchase?

if ( amount < bank_balance ) {

    console.log("I'll take the accessory!");
    amount = amount + ACCESSORY_PRICE;
}

else {

    console.log("No, thanks.");
}

the if statement expects a boolean, but if one pass it something that's not already boolean, coercion will occur

What are loops ?

Repeat a set of actions until a certain condition fails or holds

What is an iteration?

each time the loop block executes that is called an iteration

What are the difference between while loop and do..while loop

while loop

while (numOfCustomers > 0) {

    console.log( "How may I help you?" );

    //help the customer...

    numOfCustomers = numOfCustomers - 1;
}

//versus:

do {

    console.log( "How may I help you?" );

    // help the customers...

    numOfCustomers = numOfCustomers - 1;

} while (numOfCustomers > 0);

The difference is between to these loops is whether the conditional is tested before the first iteration (while) or after the first iteration ( do while )

break statement can be used to stop a loop

var i = 0;

// a while..true loop would run forever right?

while (true) {

    if ((i<=9) === false) {

        break;
    }

    console.log(i);
    i = i + 1;
}

for loop:

for (var i = 0; i <=9; i = i + 1) {

    console.log( i );
}

initialization clause, the conditional test clause, and the update clause.

What is a function?

a named section of code that can be "called" by name, and the code inside it will be run each time

function printAmount () {

    console.log(amount.toFixed(2));
}

var amount = 99.99;

printAmount ();

amount = amount * 2;

printAmount();

What are arguments?

values you pass in a function

function printAmount(amt) {

    console.log(amt.toFixed(2));
}

function formatAmount() {

    return "$" + amount.toFixed(2);
}

var amount = 99.99;

printAmount (amount * 2 );

amount = formatAmount();
console.log(amount);


functions can be useful just to organize related bits of code into named collections, even if you only plan to call them once.

const TAX_RATE = 0.08;

function calculateFinalPurchaseAmount(amt) {

    // calculate the new amount with the tax
    amt = amt + (amt * TAX_RATE);

    //return the new amount
    return amt;
}

var amount = 99.99;

amount = calculateFinalPurchaseAmount ( amount );

console.log ( amount.toFixed( 2 ));


What is scope?

a collection of variables as well as the rules for how those variables are accessed by name. Only code inside that function can access that function's scoped variables

variable name has to be unique within the same scope

function one() {

    //this 'a' only belongs to the 'one()' function
    var a = 1;
    console.log(a);
}

function two() {

    //this 'a' only belongs to the 'two()' function
    var a = 2;
    console.log(a);
}

one(); //1
two(); //2

if one scope is nested inside another, code inside the innermost scope can access variables from either scope

ex

function outer() {

    var a = 1;

    function inner() {

        var b =2;

        console.log( a + b );
    }

    inner();

    //we can only access 'a' here

    console.log(a);
}

outer();
